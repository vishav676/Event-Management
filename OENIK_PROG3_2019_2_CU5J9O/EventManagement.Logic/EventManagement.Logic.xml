<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventManagement.Logic</name>
    </assembly>
    <members>
        <member name="T:EventManagement.Logic.BusinessLogic">
            <summary>
            This class connects the Repository class to our main program file.
            </summary>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.#ctor(EventManagement.Repository.ITicketRepository,EventManagement.Repository.IEventRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EventManagement.Logic.BusinessLogic"/> class.
            Constructor for the class which takes two parameters.
            </summary>
            <param name="ticketRepo">instance of Ticket Repository.</param>
            <param name="eventRepository">instance of Event Repository.</param>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.ChangeTicketDiscount(System.Int32,System.Int32)">
            <summary>
            Method to change the discount value for the specifc Guest.
            </summary>
            <param name="id">Ticket Id of the Guest.</param>
            <param name="newDiscount">New Value to be Updated.</param>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.GetAllTickets">
            <summary>
            Method which returns all the tickets that has been sold.
            </summary>
            <returns>List of Tickets.</returns>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.GetEventSale">
            <summary>
            This method provide the information about total sale of the every Event.
            </summary>
            <returns>List with Event name and its Total Sale.</returns>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.GetOneTicket(System.Int32)">
            <summary>
            This method return all the detailed information about the specific Ticket.
            </summary>
            <param name="id">Ticket Id.</param>
            <returns>Instance of required Ticket.</returns>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.add(EventManagement.Data.Models.Event)">
            <summary>
            This method allow the user to add new Event to its Database.
            </summary>
            <param name="entity">Instance of Type Event.</param>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.getAllEvent">
            <summary>
            This method gives all the Events in the Database.
            </summary>
            <returns>List of the type Event.</returns>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.remove(System.Int32)">
            <summary>
            This method allow the user to delete the specific Event from the Database.
            </summary>
            <param name="id">Id of the Event of type Integer.</param>
            <returns>Boolean Value if Event is deleted or not.</returns>
        </member>
        <member name="M:EventManagement.Logic.BusinessLogic.updatePlace(System.Int32,System.String)">
            <summary>
            This method is used to change the Event place in case Plans are changed.
            </summary>
            <param name="id">Event Id of type Integer.</param>
            <param name="newPlace">Name of New Place of Type String.</param>
        </member>
    </members>
</doc>
